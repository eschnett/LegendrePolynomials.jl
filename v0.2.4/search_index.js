var documenterSearchIndex = {"docs":
[{"location":"","page":"Reference","title":"Reference","text":"CurrentModule = LegendrePolynomials","category":"page"},{"location":"#LegendrePolynomials.jl","page":"Reference","title":"LegendrePolynomials.jl","text":"","category":"section"},{"location":"","page":"Reference","title":"Reference","text":"Modules = [LegendrePolynomials]","category":"page"},{"location":"#LegendrePolynomials.Pl!-Tuple{Union{AbstractArray{var\"#s13\",1}, AbstractArray{var\"#s13\",2}} where var\"#s13\"<:Real,Real}","page":"Reference","title":"LegendrePolynomials.Pl!","text":"Pl!(arr::AbstractArray, x::Real; [lmax = maximum(axes(arr,1))])\n\nComputes the Legendre Polynomials P_l(x) for the argument x and l = 0:lmax, and saves it in arr. Assumes that arr has 0-based indexing.\n\nAll dimensions of arr should have indices starting from 0. The axes of arr should be (0:l, 0:n) where l >= lmax and n >= 0\n\nAt output, arr[l,0] == Pl(x,l)\n\nThe optional keyword argument lmax may specify the range of l's to compute. It defaults to lmax = maximum(axes(arr,1))\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl-Tuple{Real,Integer}","page":"Reference","title":"LegendrePolynomials.Pl","text":"Pl(x::Real, l::Integer)\n\nComputes the Legendre Polynomials P_l(x) for the argument x and the degree l\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl-Tuple{Real}","page":"Reference","title":"LegendrePolynomials.Pl","text":"Pl(x::Real; lmax::Integer)\n\nComputes the Legendre Polynomials P_l(x) for the argument x and l = 0:lmax. Returns an OffsetArray P with indices 0:lmax, where P[l] == Pl(x,l)\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl_d2Pl!-Tuple{AbstractArray{var\"#s15\",2} where var\"#s15\"<:Real,Real}","page":"Reference","title":"LegendrePolynomials.Pl_d2Pl!","text":"Pl_d2Pl!(arr::AbstractMatrix, x::Real; [lmax = maximum(axes(arr,1))])\n\nComputes the first and second derivatives d_xP_l(x) and d_x^2P_l(x),  for the argument x and l = 0:lmax,  and saves them in arr. Assumes that arr has 0-based indexing.\n\nThe first dimension of arr should be 0:l, where l >= lmax The second dimension should be 0:n where n >= 2\n\nAt output, arr[l,0] == dPl(x,l) and arr[l,2] == d2Pl(x,l)\n\nThe optional keyword argument lmax may specify the range of l's to compute. It defaults to lmax = maximum(axes(arr,1))\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl_d2Pl-Tuple{Real,Integer}","page":"Reference","title":"LegendrePolynomials.Pl_d2Pl","text":"Pl_d2Pl(x::Real, l::Integer)\n\nComputes the the Legendre Polynomials P_l(x) and their second derivatives  d_x^2P_l(x) for the argument x and the degree l\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl_d2Pl-Tuple{Real}","page":"Reference","title":"LegendrePolynomials.Pl_d2Pl","text":"Pl_d2Pl(x::Real; lmax::Integer)\n\nComputes the the Legendre Polynomials P_l(x) and their second derivatives  d_x^2P_l(x) for the argument x and l = 0:lmax\n\nReturns OffsetArrays P and d2P with indices 0:lmax, where P[l] == Pl(x,l) and  d2P[l] == d2Pl(x,l)\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl_dPl!-Tuple{AbstractArray{var\"#s15\",2} where var\"#s15\"<:Real,Real}","page":"Reference","title":"LegendrePolynomials.Pl_dPl!","text":"Pl_dPl!(arr, x; [lmax = maximum(axes(arr,1))])\n\nComputes the Legendre Polynomials P_l(x) and their derivatives d_xP_l(x) for the argument x and l = 0:lmax, and saves them in arr.  Assumes that arr has 0-based indexing.\n\nAll dimensions of arr should have indices starting from 0  The axes of arr should be (0:l, 0:n) where l >= lmax and n = 1\n\nAt output, arr[l,0] == Pl(x,l) and arr[l,1] == dPl(x,l)\n\nThe optional keyword argument lmax may specify the range of l's to compute. It defaults to lmax = maximum(axes(arr,1))\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl_dPl-Tuple{Real,Integer}","page":"Reference","title":"LegendrePolynomials.Pl_dPl","text":"Pl_dPl(x::Real, l::Integer)\n\nComputes the the Legendre Polynomials P_l(x) and their first derivatives  d_xP_l(x) for the argument x and the degree l.\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl_dPl-Tuple{Real}","page":"Reference","title":"LegendrePolynomials.Pl_dPl","text":"Pl_dPl(x::Real; lmax::Integer)\n\nComputes the the Legendre Polynomials P_l(x) and their derivatives d_xP_l(x) for the argument x and l = 0:lmax Returns OffsetArrays P and dP with indices 0:lmax, where P[l] == Pl(x,l) and  dP[l] == dPl(x,l).\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl_dPl_d2Pl!-Tuple{AbstractArray{var\"#s15\",2} where var\"#s15\"<:Real,Real}","page":"Reference","title":"LegendrePolynomials.Pl_dPl_d2Pl!","text":"Pl_dPl_d2Pl!(arr::AbstractMatrix, x::Real; [lmax = maximum(axes(arr,1))])\n\nComputes the Legendre Polynomials P_l(x) and their first and second  derivatives d_xP_l(x) and d_x^2P_l(x), for the argument x and l = 0:lmax,  and saves them in arr. Assumes that arr has 0-based indexing.\n\nAll dimensions of arr should have indices starting from 0 The axes of arr should be (0:l, 0:n) where l >= lmax and n >= 2\n\nAt output, arr[l,0] == Pl(x,l), arr[l,1] == dPl(x,l) and arr[l,2] == d2Pl(x,l)\n\nThe optional keyword argument lmax can specify the range of l's to compute. It defaults to lmax = maximum(axes(arr,1))\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl_dPl_d2Pl-Tuple{Real,Integer}","page":"Reference","title":"LegendrePolynomials.Pl_dPl_d2Pl","text":"Pl_dPl_d2Pl(x::Real, l::Integer)\n\nComputes the the Legendre Polynomials P_l(x) and their first derivatives  d_xP_l(x) and second derivatives d_x^2P_l(x) for the argument x and the degree l\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.Pl_dPl_d2Pl-Tuple{Real}","page":"Reference","title":"LegendrePolynomials.Pl_dPl_d2Pl","text":"Pl_dPl_d2Pl(x::Real; lmax::Integer)\n\nComputes the the Legendre Polynomials P_l(x) and their first derivatives  d_xP_l(x) and second derivatives d_x^2P_l(x) for the argument x and l = 0:lmax. Returns OffsetArrays P, dP and d2P with indices 0:lmax,  where P[l] == Pl(x,l), dP[l] == dPl(x,l) and d2P[l] == d2Pl(x,l)\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.d2Pl!-Tuple{AbstractArray{var\"#s15\",1} where var\"#s15\"<:Real,Real}","page":"Reference","title":"LegendrePolynomials.d2Pl!","text":"d2Pl!(arr::AbstractArray, x::Real; [lmax = maximum(axes(arr,1))])\n\nComputes the second derivatives of Legendre Polynomials d_x^2P_l(x) for the argument x and l = 0:lmax, and saves them in arr.  Assumes that arr has 0-based indexing.\n\nThe first dimension of arr should be 0:l, where l >= lmax The second dimension – if arr is 2D – should contain the index 2\n\nAt output, arr[l] == d2Pl(x,l) if arr is a Vector or arr[l,2] == d2Pl(x,l) if arr is a Matrix\n\nThe optional keyword argument lmax may specify the range of l's to compute. It defaults to lmax = maximum(axes(arr,1))\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.d2Pl-Tuple{Real,Integer}","page":"Reference","title":"LegendrePolynomials.d2Pl","text":"d2Pl(x::Real, l::Integer)\n\nComputes the second derivatives of Legendre Polynomials d_x^2P_l(x) for the  argument x and the degree l\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.d2Pl-Tuple{Real}","page":"Reference","title":"LegendrePolynomials.d2Pl","text":"d2Pl(x::Real; lmax::Integer)\n\nComputes the second derivatives of Legendre Polynomials d_x^2P_l(x) for the  argument x and l = 0:lmax Returns an OffsetArray d2P with indices 0:lmax, where d2P[l] == d2Pl(x,l)\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.dPl!-Tuple{AbstractArray{var\"#s15\",1} where var\"#s15\"<:Real,Real}","page":"Reference","title":"LegendrePolynomials.dPl!","text":"dPl!(arr::AbstractArray, x::Real; [lmax = maximum(axes(arr,1))])\n\nComputes the first derivatives of Legendre Polynomials d_xP_l(x) for the argument x and l = 0:lmax, and saves them in arr.  Assumes that arr has 0-based indexing.\n\nThe first dimension of arr should be 0:l, where l >= lmax The second dimension – if arr is 2D – should contain the index 1\n\nAt output, arr[l] == dPl(x,l) if arr is a Vector or arr[l,1] == dPl(x,l) if arr is a Matrix\n\nThe optional keyword argument lmax may specify the range of l's to compute. It defaults to lmax = maximum(axes(arr,1))\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.dPl-Tuple{Real,Integer}","page":"Reference","title":"LegendrePolynomials.dPl","text":"dPl(x::Real, l::Integer)\n\nComputes the first derivatives of Legendre Polynomials d_xP_l(x) for the  argument x and the degree l\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.dPl-Tuple{Real}","page":"Reference","title":"LegendrePolynomials.dPl","text":"dPl(x::Real; lmax::Integer)\n\nComputes the first derivatives of Legendre Polynomials d_xP_l(x) for the  argument x and l = 0:lmax. Returns an OffsetArray dP with indices 0:lmax, where dP[l] = dPl(x,l)\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.dPl_d2Pl!-Tuple{AbstractArray{var\"#s15\",2} where var\"#s15\"<:Real,Real}","page":"Reference","title":"LegendrePolynomials.dPl_d2Pl!","text":"dPl_d2Pl!(arr::AbstractMatrix, x::Real; [lmax = maximum(axes(arr,1))])\n\nComputes the first and second derivatives d_xP_l(x) and d_x^2P_l(x),  for the argument x and l = 0:lmax,  and saves them in arr. Assumes that arr has 0-based indexing.\n\nThe first dimension of arr should be 0:l, where l >= lmax The second dimension should be 1:n where n >= 2\n\nAt output, arr[l,1] == dPl(x,l) and arr[l,2] == d2Pl(x,l)\n\nThe optional keyword argument lmax may specify the range of l's to compute. It defaults to lmax = maximum(axes(arr,1))\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.dPl_d2Pl-Tuple{Real,Integer}","page":"Reference","title":"LegendrePolynomials.dPl_d2Pl","text":"dPl_d2Pl(x::Real, l::Integer)\n\nComputes the the first and second derivatives of Legendre Polynomials d_xP_l(x) and d_x^2P_l(x) for the argument x and the degree l\n\n\n\n\n\n","category":"method"},{"location":"#LegendrePolynomials.dPl_d2Pl-Tuple{Real}","page":"Reference","title":"LegendrePolynomials.dPl_d2Pl","text":"dPl_d2Pl(x::Real; lmax::Integer)\n\nComputes the the first and second derivatives of Legendre Polynomials d_xP_l(x) and d_x^2P_l(x) for the argument x and l = 0:lmax\n\nReturns OffsetArrays dP and d2P with indices 0:lmax, where dP[l] == dPl(x,l) and  d2P[l] == d2Pl(x,l)\n\n\n\n\n\n","category":"method"}]
}
